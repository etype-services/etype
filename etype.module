<?php

/* por quÃ©, Drupal? */
include_once 'etype.blocks.inc';

/**
 * @file
 * Custom functions and hooks for Etype Services
 */

/**
 * Implements hook_menu().
 */
function etype_menu() {

  $items = [];

  /* Add first e-Edition link to User Menu */
  $items['e-edition'] = [
    'title' => 'e-Edition',
    'description' => 'Read the e-Edition',
    'page callback' => '_etype_e_edition',
    'access arguments' => ['access content'],
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
  ];

  /* ADA Compliance */
  $items['ada-compliance'] = [
    'title' => 'ADA',
    'description' => 'Americans with Disabilities Act Compliance Statement',
    'page callback' => '_etype_ada_compliance',
    'access arguments' => ['access content'],
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['etype-classified-import'] = [
    'title' => t('Import Classified Ads'),
    'page callback' => 'etype_classified_ad_importer',
    'type' => MENU_CALLBACK,
    'access arguments' => ['access administration pages'],
  ];

  $items['etype-node-cleanup'] = [
    'title' => t('Clean up nodes'),
    'page callback' => 'etype_node_cleanup',
    'type' => MENU_CALLBACK,
    'access arguments' => ['access administration pages'],
  ];

  /* admin settings page */
  $items['admin/config/etype'] = [
    'title' => 'eType',
    'description' => 'eType Settings',
    // Like any other menu item
    'position' => 'right',
    'weight' => -15,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => ['administer site configuration'],
    // Permission needed to view this area
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];

  $items['admin/config/etype/settings'] = [
    'title' => 'eType Settings',
    'description' => 'eType integration options',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['etype_admin'],
    'file' => 'etype.admin.inc',
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * redirect to e-Edition (defaults to first of possible multiple)
 */
function _etype_e_edition() {
  $e_editions = etype_e_editions();
  drupal_goto($e_editions[0]['path']);
}

/**
 * Function to get path to site folder
 *
 * @return string
 */
function _etype_site_path() {
  return $_SERVER['DOCUMENT_ROOT'] . base_path() . conf_path();
}

/**
 * Clean up node table
 */
function etype_node_cleanup() {
  $res = db_query('SELECT n.nid FROM node n LEFT JOIN node_revision nr ON nr.nid = n.nid WHERE nr.vid IS NULL');
  if (count($res) > 0) {
    $nids = [];
    foreach ($res as $record) {
      // Do something with each $record
      $nids[] = $record->nid;
    }
    node_delete_multiple($nids);
  }
}

/**
 * Cron Jobs
 * @param $op
 * @param null $job
 * @return mixed
 */
function etype_cronapi($op, $job = NULL) {
  $cron_schedule = variable_get('etype_classified_cron', '');
  if (empty ($cron_schedule)) {
    $etype_site_path = _etype_site_path();
    $settings_file = $etype_site_path . '/etype_settings.php';
    if (file_exists($settings_file)) {
      include($etype_site_path . '/etype_settings.php');
    }
  }

  if (!empty($cron_schedule)) {
    /* Classified importer */
    $items['etype_classified_cron'] = [
      'description' => 'Import Classified Ads',
      'rule' => $cron_schedule,
      'callback' => 'etype_classified_ad_importer',
    ];
    return $items;
  }
}

/**
 * @param $vid
 * @return int|mixed|void
 * Map xml classified categories to Drupal taxonomy items
 */
function etype_classfied_mapping($vid) {

  $cats = variable_get('etype_classified_map');
  $categories = [];
  if (empty ($cats)) {
    $etype_site_path = _etype_site_path();
    include($etype_site_path . '/etype_settings.php');
  } else {
    foreach (explode(PHP_EOL, $cats) as $item) {
      $arr = explode('|', $item);
      $categories[$arr[0]] = $arr[1];
    }
  }


  if (!isset($vid)) {
    watchdog('etype', "No category id for item", $variables = [], $severity = WATCHDOG_ERROR);
    return;
  } else {

    $ad_cat = 0;

    foreach ($categories as $k => $v) {
      if ($vid == $k) {
        $ad_cat = $v;
        continue;
      }
    }

    if ($ad_cat == 0) {
      watchdog('etype', "%vid not matched", $variables = ['%vid' => $vid], $severity = WATCHDOG_ERROR);
    }
  }
  return $ad_cat;

}

/**
 * Create Entity
 * @param array $item
 * @param array $values
 * @param string $entity_type
 */
function etype_entity_create($item = [], $values = [], $entity_type = 'node') {

  $entity = entity_create($entity_type, $values);
  $ewrapper = entity_metadata_wrapper($entity_type, $entity);
  if (count($item) > 0) {
    foreach ($item as $k => $v) {
      switch ($k) {

        case 'body':
          $ewrapper->body->set(['value' => $v]);
          break;

        case 'category':
          $v = intval($v);
          $ewrapper->classified_category->set($v);
          break;

        default:
          $ewrapper->$k->set($v);
      }
    }
    $ewrapper->save(TRUE);
  }
}

/**
 * feeds cron job
 */
function etype_classified_ad_importer() {

  global $user;
  $url = variable_get('etype_classified_import_url', '');
  if (empty($url)) {
    $etype_site_path = _etype_site_path();
    $settings_file = $etype_site_path . '/etype_settings.php';
    if (file_exists($settings_file)) {
      include($etype_site_path . '/etype_settings.php');
    }
  }

  if (!empty($url)) {

    $values = [
      'type' => 'classified',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
      'language' => LANGUAGE_NONE,
    ];

    $xml = file_get_contents($url);
    if ($xml !== FALSE) {

      $ad_obj = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA);
      $i = 0;
      if (count($ad_obj) > 0) {

        /* delete all current ads */
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'classified');
        $result = $query->execute();
        // dpq($query);
        if (count($result) > 0) {
          $nids = array_keys($result['node']);
          $i = count($nids);
          node_delete_multiple($nids);
          watchdog('etype', "EType Classified Importer deleted %num Classified Ads", $variables = ['%num' => $i], $severity = WATCHDOG_NOTICE);
          // drupal_set_message(t("EType Classified Importer deleted $i expired nodes"), 'status');
        } else {
          watchdog('etype', "EType Classified Importer found no Classified Ads to delete", $variables = [], $severity = WATCHDOG_NOTICE);
        }

        $i = 0;
        /* loop over xml and add new Classified Ads */
        foreach ($ad_obj as $ad) {

          // xml object processing to make array
          $array = [];
          foreach ($ad as $k => $v) {
            $v = (array) $v;
            isset($v[0]) ? $array[$k] = $v[0] : $array[$k] = '';
          }

          /* check for valid matched category, otherwise there will be an error in node creation */
          $category = etype_classfied_mapping($array['categoryId']);
          if ($category > 0) {
            $node = [
              'title' => $array['ItemTitle'],
              'body' => $array['ItemDesc'],
              'category' => etype_classfied_mapping($array['categoryId']),
            ];
            // print_r($node);
            $values['created'] = strtotime($array['startDate']);
            etype_entity_create($node, $values);
            $i++;
          }
        }
      }
      watchdog('etype', "EType Classified Importer added %num Classified Ads", $variables = ['%num' => $i], $severity = WATCHDOG_NOTICE);
      // drupal_set_message(t("EType Classified Importer added $i nodes"), 'status');
    } else {
      watchdog('etype', "EType Classified Importer found no xml at %url", $variables = ['%url' => $url], $severity = WATCHDOG_NOTICE);
    }

  }
}

function etype_clear_cache() {
  drupal_flush_all_caches();
  watchdog('etype', "Cache cleared", $variables = [], $severity = WATCHDOG_NOTICE);
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 * For Nassau
 * TODO; show only on Nassau
 */
function etype_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  $form['phone'] = [
    '#title' => t('Phone number'),
    '#type' => 'textfield',
    '#required' => TRUE,
  ];
}

/**
 * @param $node
 * @param $teaser
 * @return bool
 * override premium level for Shoutem feeds
 */
function etype_premium_access(&$node, $teaser = NULL) {
  $permitido = [
    '/news-mobile.xml',
    '/sports-mobile.xml',
    '/lifestyle-mobile.xml',
    '/obits-mobile.xml',
    '/commentary-mobile.xml',
  ];
  $solicitud = request_uri();
  if (in_array($solicitud, $permitido)) {
    return TRUE;
  }
}

/**
 * Parse e-Edition settings into an array for use in other functions
 * @return array
 */
function etype_e_editions() {
  $uid = user_is_logged_in();
  $e_edition = empty(theme_get_setting('e_edition'))? variable_get('etype_e_edition'): theme_get_setting('e_edition');
  $pub = empty(theme_get_setting('pub'))? variable_get('etype_pub'): theme_get_setting('pub');
  $ptype = empty(theme_get_setting('ptype'))? variable_get('etype_ptype'): theme_get_setting('ptype');
  $site = variable_get('site_name', 'Drupal');

  /* because Lutcher has a comma */
  if (strpos($e_edition, '|') !== false) {
    $items = explode(',', $e_edition);
    $pubs = explode(',', $pub);
    $ptypes = explode(',', $ptype);
  } else {
    $items = [$e_edition];
    $pubs = [$pub];
    $ptypes = [$ptype];
  }

  $e_editions = [];
  $ptr = 0;
  foreach ($items as $item) {
    $arr = explode('|', $item);
    if (isset($arr[1])) {
      $site = trim($arr[1]);
    }

    $ar2 = preg_split("/ID[0-9]+/", $arr[0]); // make LandingImage directory name
    $imagedir = trim($ar2[0]);
    $e_editions[$ptr]['image'] = 'https://etypeservices.com/LandingPageImages/' . $imagedir . '/currentpg1.jpg';

    if (isset($pubs[$ptr])) {
      $pub = trim($pubs[$ptr]);
    }
    if (isset($ptypes[$ptr])) {
      $ptype = trim($ptypes[$ptr]);
    }
    $e_edition = trim($arr[0]);

    if ($uid > 0) {
      if (!empty ($pub)) {
        global $user;
        $path = 'https://etypeservices.com/ReadTheEdition.aspx?Username=' . $user->name . "&Pub=" . $pub . "&PType=" . $ptype;
      } else {
        $path = 'https://etypeservices.com/' . $e_edition . '/';
      }
    } else {
      $path = 'https://etypeservices.com/' . $e_edition . '/';
    }

    $e_editions[$ptr]['site_name'] = trim($site);
    $e_editions[$ptr]['path'] = $path;
    $ptr++;
  }
  return $e_editions;
}

/**
 * @return mixed
 */
function _etype_get_site_identifier() {
  $base_path = conf_path();
  preg_match("/sites\/([-a-z]+)\..*/", $base_path, $matches);
  return $matches[1];
}

/**
 * @param $variables
 * Add fontawesome script
 */
function etype_preprocess_html(&$variables) {
  $fontawesome = [
    '#type' => 'markup',
    '#markup' => '
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
',
  ];
  drupal_add_html_head($fontawesome, 'etype_fontawesome');

  $adsense = variable_get('etype_google_adsense_property_id');
  if (!empty($adsense)) {
    $adsense_script = [
      '#type' => 'markup',
      '#markup' => '
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script> (adsbygoogle = window.adsbygoogle || []).push({
google_ad_client: "' . $adsense . '",
enable_page_level_ads: true
});
</script> 
',
    ];
    drupal_add_html_head($adsense_script, 'etype_adsense');
  }

  drupal_add_css(drupal_get_path('module', 'etype') . '/css/etype.css');
  drupal_add_js(drupal_get_path('module', 'etype') . '/js/etype.js');
  $variables['classes_array'][] = _etype_get_site_identifier();
}

/**
 * Implement hook_ranking()
 */
function etype_ranking() {
  return [
    'node_created_date' => [
      'title' => t('Node Published Date'),
      'score' => 'n.created',
    ],
  ];
}

/**
 * Implement hook_preprocess_search_results()
 * To order search results by time (not 'relevance')
 */
function etype_preprocess_search_results(&$vars) {
  $results = $vars['results'];// via dsm (Devel module), we can see node creation time is available under the 'results' array
  usort($results, function ($v1, $v2) {
    return $v2['node']->created - $v1['node']->created; // sort by updated time, DESC order
  });
  $value = '';
  $output_results = [];
  foreach ($results as $item) {
    $value .= theme('search_result', ['result' => $item, 'module' => $vars['module']]);
    $output_results[] = $value;
    $value = '';
  } // store all results into an array
  $output = implode(" ", $output_results) . "<br>"; // convert array to string
  $vars['search_results'] = $output;
}

/**
 * Implements hook_user_login()
 * @param $edit
 * @param $account
 * Set cookie by role for caching/proxy serving
 */
function etype_user_login(&$edit, $account) {
  function in_array_any($needles, $haystack) {
    return (bool)(array_intersect($needles, $haystack));
  }
  $check = in_array_any(['administrator', 'Editor', 'editor', 'Reporter'], $account->roles);
  if ($check == 1) {
    setcookie('nocache', '1', 0, '/');
  } else {
    $check = in_array_any(['authenticated user'], $account->roles);
    if ($check == 1) {
      setcookie('nocache', '2', 0, '/');
    }
  }
}

/**
 * Implements hook_user_logout().
 * Remove nocache cookie
 */
function etype_user_logout($account) {
  // Set cookie in the past and then remove it.
  setcookie('nocache', '', REQUEST_TIME - 3600, '/');
  unset($_COOKIE['nocache']);
}

/**
 * For ADA compliance, make sure images have alt tag.
 * @param $variables
 */
function etype_preprocess_image(&$variables) {
  if (empty($variables['alt'])) {
    $variables['alt'] = "Article Image Alt Text";
  }
}


/**
 * @return array
 */
function etype_theme(){
  return array(
    'ada_compliance' => [
      'template' => 'ada-compliance',
    ],
  );
}


/**
 * ADA Compliance Page
 */
function _etype_ada_compliance() {
  return theme('ada_compliance');
}
